-- üõçÔ∏è ÏôÑÏ†ÑÌïú ÏáºÌïëÎ™∞ Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà
-- Ïù¥ ÌååÏùºÏùÑ Supabase SQL ÏóêÎîîÌÑ∞ÏóêÏÑú Ïã§ÌñâÌïòÏÑ∏Ïöî

-- ========================================
-- 1. Î∏åÎûúÎìú ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS brands (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) UNIQUE NOT NULL,
  description TEXT,
  logo_url TEXT,
  website_url TEXT,
  is_featured BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 2. Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÖåÏù¥Î∏î (Í≥ÑÏ∏µ Íµ¨Ï°∞ ÏßÄÏõê)
-- ========================================
CREATE TABLE IF NOT EXISTS categories (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) UNIQUE NOT NULL,
  description TEXT,
  image_url TEXT,
  icon_class VARCHAR(100), -- FontAwesome ÏïÑÏù¥ÏΩò ÌÅ¥ÎûòÏä§
  parent_id BIGINT REFERENCES categories(id),
  sort_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  meta_title VARCHAR(255),
  meta_description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 3. ÏÉÅÌíà ÌÖåÏù¥Î∏î (ÌôïÏû•Îêú Î≤ÑÏ†Ñ)
-- ========================================
CREATE TABLE IF NOT EXISTS products (
  id BIGSERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) UNIQUE NOT NULL,
  description TEXT,
  short_description TEXT,
  sku VARCHAR(100) UNIQUE,
  
  -- Í∞ÄÍ≤© Ï†ïÎ≥¥
  price DECIMAL(10,2) NOT NULL,
  compare_price DECIMAL(10,2),
  cost_price DECIMAL(10,2),
  
  -- Ïû¨Í≥† Í¥ÄÎ¶¨
  track_quantity BOOLEAN DEFAULT true,
  quantity INTEGER DEFAULT 0,
  low_stock_threshold INTEGER DEFAULT 5,
  
  -- Î¨ºÎ¶¨Ï†Å ÏÜçÏÑ±
  weight DECIMAL(8,2),
  
  -- ÏÉÅÌíà Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
  type VARCHAR(50) DEFAULT 'simple', -- simple, variable, grouped, digital
  status VARCHAR(20) DEFAULT 'active', -- active, inactive, draft
  visibility VARCHAR(20) DEFAULT 'public', -- public, private
  
  -- Ïù¥ÎØ∏ÏßÄ Î∞è ÎØ∏ÎîîÏñ¥
  featured_image TEXT,
  gallery_images JSONB DEFAULT '[]',
  
  -- SEO
  meta_title VARCHAR(255),
  meta_description TEXT,
  
  -- ÌäπÎ≥Ñ ÌîåÎûòÍ∑∏Îì§
  is_featured BOOLEAN DEFAULT false,
  is_popular BOOLEAN DEFAULT false,
  is_bestseller BOOLEAN DEFAULT false,
  is_digital BOOLEAN DEFAULT false,
  
  -- Í¥ÄÍ≥Ñ
  category_id BIGINT REFERENCES categories(id),
  brand_id BIGINT REFERENCES brands(id),
  
  -- ÌèâÏ†ê (Ï∫êÏãúÏö©)
  average_rating DECIMAL(3,2) DEFAULT 0,
  review_count INTEGER DEFAULT 0,
  
  -- ÌåêÎß§ ÌÜµÍ≥Ñ (Ï∫êÏãúÏö©)
  sales_count INTEGER DEFAULT 0,
  view_count INTEGER DEFAULT 0,
  
  -- Ï∂îÍ∞Ä ÏÜçÏÑ± (JSONÏúºÎ°ú Ï†ÄÏû•)
  attributes JSONB DEFAULT '{}',
  variations JSONB DEFAULT '[]',
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 4. ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  display_name VARCHAR(200),
  phone VARCHAR(20),
  date_of_birth DATE,
  gender VARCHAR(10),
  avatar_url TEXT,
  
  -- ÌôòÍ≤Ω ÏÑ§Ï†ï
  newsletter_subscribed BOOLEAN DEFAULT false,
  sms_notifications BOOLEAN DEFAULT false,
  email_notifications BOOLEAN DEFAULT true,
  language VARCHAR(10) DEFAULT 'ko',
  currency VARCHAR(3) DEFAULT 'KRW',
  
  -- Í≥†Í∞ù Îì±Í∏â
  customer_tier VARCHAR(20) DEFAULT 'bronze', -- bronze, silver, gold, platinum
  total_spent DECIMAL(12,2) DEFAULT 0,
  total_orders INTEGER DEFAULT 0,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 5. ÏÇ¨Ïö©Ïûê Ï£ºÏÜå ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS user_addresses (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title VARCHAR(100), -- 'Ïßë', 'ÌöåÏÇ¨', 'Í∏∞ÌÉÄ' Îì±
  recipient_name VARCHAR(200),
  phone VARCHAR(20),
  address_line_1 TEXT NOT NULL,
  address_line_2 TEXT,
  city VARCHAR(100),
  state VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100) DEFAULT 'ÎåÄÌïúÎØºÍµ≠',
  is_default BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 6. Ï£ºÎ¨∏ ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS orders (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  order_number VARCHAR(50) UNIQUE,
  
  -- Í∏àÏï° Ï†ïÎ≥¥
  subtotal DECIMAL(10,2) NOT NULL,
  tax_amount DECIMAL(10,2) DEFAULT 0,
  shipping_amount DECIMAL(10,2) DEFAULT 0,
  discount_amount DECIMAL(10,2) DEFAULT 0,
  total_amount DECIMAL(10,2) NOT NULL,
  
  -- ÌÜµÌôî
  currency VARCHAR(3) DEFAULT 'KRW',
  
  -- ÏÉÅÌÉú
  status VARCHAR(20) DEFAULT 'pending', -- pending, processing, shipped, delivered, cancelled
  payment_status VARCHAR(20) DEFAULT 'pending', -- pending, paid, failed, refunded
  
  -- Î∞∞ÏÜ° Ï†ïÎ≥¥
  shipping_address JSONB,
  billing_address JSONB,
  tracking_number VARCHAR(100),
  shipped_at TIMESTAMP WITH TIME ZONE,
  delivered_at TIMESTAMP WITH TIME ZONE,
  
  -- Ìï†Ïù∏ Ï†ïÎ≥¥
  coupon_code VARCHAR(50),
  coupon_discount DECIMAL(10,2) DEFAULT 0,
  
  -- Î©îÎ™®
  notes TEXT,
  admin_notes TEXT,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 7. Ï£ºÎ¨∏ ÏïÑÏù¥ÌÖú ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS order_items (
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
  product_id BIGINT REFERENCES products(id),
  
  -- ÏÉÅÌíà Ï†ïÎ≥¥ (Ï£ºÎ¨∏ ÏãúÏ†êÏùò Ï†ïÎ≥¥ Ï†ÄÏû•)
  product_title VARCHAR(255),
  product_sku VARCHAR(100),
  product_image TEXT,
  price DECIMAL(10,2) NOT NULL,
  quantity INTEGER NOT NULL,
  total DECIMAL(10,2) NOT NULL,
  
  -- ÏÉÅÌíà ÏòµÏÖò
  product_options JSONB DEFAULT '{}',
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 8. Í≤∞Ï†ú ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS payments (
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id),
  payment_method VARCHAR(50), -- stripe, paypal, bank_transfer
  transaction_id VARCHAR(255),
  amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'KRW',
  status VARCHAR(20) DEFAULT 'pending', -- pending, completed, failed, refunded
  
  -- Í≤∞Ï†ú Ï†úÍ≥µÏûê ÏùëÎãµ Îç∞Ïù¥ÌÑ∞
  provider_response JSONB DEFAULT '{}',
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 9. Ïø†Ìè∞ ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS coupons (
  id BIGSERIAL PRIMARY KEY,
  code VARCHAR(50) UNIQUE NOT NULL,
  title VARCHAR(255),
  description TEXT,
  
  -- Ìï†Ïù∏ Ï†ïÎ≥¥
  discount_type VARCHAR(20) NOT NULL, -- percentage, fixed_amount, free_shipping
  discount_value DECIMAL(10,2) NOT NULL,
  minimum_amount DECIMAL(10,2) DEFAULT 0,
  maximum_discount DECIMAL(10,2),
  
  -- ÏÇ¨Ïö© Ï†úÌïú
  usage_limit INTEGER,
  used_count INTEGER DEFAULT 0,
  usage_limit_per_user INTEGER DEFAULT 1,
  
  -- Ïú†Ìö® Í∏∞Í∞Ñ
  start_date TIMESTAMP WITH TIME ZONE,
  end_date TIMESTAMP WITH TIME ZONE,
  
  -- ÏÉÅÌÉú
  active BOOLEAN DEFAULT true,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 10. ÏúÑÏãúÎ¶¨Ïä§Ìä∏ ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS wishlists (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(user_id, product_id)
);

-- ========================================
-- 11. ÏÉÅÌíà Î¶¨Î∑∞ ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS product_reviews (
  id BIGSERIAL PRIMARY KEY,
  product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  order_id BIGINT REFERENCES orders(id),
  
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  title VARCHAR(255),
  comment TEXT,
  
  -- Î¶¨Î∑∞ Ïù¥ÎØ∏ÏßÄ
  images JSONB DEFAULT '[]',
  
  -- ÏÉÅÌÉú
  status VARCHAR(20) DEFAULT 'pending', -- pending, approved, rejected
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 12. Ïû•Î∞îÍµ¨Îãà ÌÖåÏù¥Î∏î
-- ========================================
CREATE TABLE IF NOT EXISTS cart_items (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  selected_options JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(user_id, product_id)
);

-- ========================================
-- Ïù∏Îç±Ïä§ ÏÉùÏÑ±
-- ========================================
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category_id);
CREATE INDEX IF NOT EXISTS idx_products_brand ON products(brand_id);
CREATE INDEX IF NOT EXISTS idx_products_status ON products(status);
CREATE INDEX IF NOT EXISTS idx_products_featured ON products(is_featured);
CREATE INDEX IF NOT EXISTS idx_orders_user ON orders(user_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_order_items_order ON order_items(order_id);
CREATE INDEX IF NOT EXISTS idx_wishlists_user ON wishlists(user_id);
CREATE INDEX IF NOT EXISTS idx_cart_items_user ON cart_items(user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_product ON product_reviews(product_id);

-- ========================================
-- RLS (Row Level Security) Ï†ïÏ±Ö ÏÑ§Ï†ï
-- ========================================
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_addresses ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE wishlists ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;

-- ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Îç∞Ïù¥ÌÑ∞Îßå Ï†ëÍ∑º Í∞ÄÎä•
CREATE POLICY "Users can manage own profile" ON user_profiles FOR ALL USING (auth.uid() = id);
CREATE POLICY "Users can manage own addresses" ON user_addresses FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can view own orders" ON orders FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create own orders" ON orders FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can manage own cart" ON cart_items FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage own wishlist" ON wishlists FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage own reviews" ON product_reviews FOR ALL USING (auth.uid() = user_id);

-- Í≥µÍ∞ú Îç∞Ïù¥ÌÑ∞Îäî Î™®Îì† ÏÇ¨Ïö©ÏûêÍ∞Ä Ï°∞Ìöå Í∞ÄÎä•
CREATE POLICY "Anyone can view active products" ON products FOR SELECT USING (status = 'active');
CREATE POLICY "Anyone can view active categories" ON categories FOR SELECT USING (is_active = true);
CREATE POLICY "Anyone can view active brands" ON brands FOR SELECT USING (is_active = true);
CREATE POLICY "Anyone can view approved reviews" ON product_reviews FOR SELECT USING (status = 'approved');

-- ========================================
-- Ìï®ÏàòÎì§
-- ========================================
-- Ï£ºÎ¨∏ Î≤àÌò∏ ÏûêÎèô ÏÉùÏÑ± Ìï®Ïàò
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS TRIGGER AS $$
BEGIN
  NEW.order_number = 'ORD-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || LPAD(NEW.id::text, 6, '0');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- updated_at ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ========================================
-- Ìä∏Î¶¨Í±∞Îì§
-- ========================================
-- Ï£ºÎ¨∏ Î≤àÌò∏ ÏûêÎèô ÏÉùÏÑ± Ìä∏Î¶¨Í±∞
CREATE TRIGGER set_order_number
  AFTER INSERT ON orders
  FOR EACH ROW
  EXECUTE FUNCTION generate_order_number();

-- updated_at ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞Îì§
CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); 